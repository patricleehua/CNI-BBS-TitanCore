server:
  port: 8080
spring:
  application:
    name: core
  profiles:
    active: dev
  datasource:
    driver-class-name: ${titan.datasource.driver-class-name}
    # 数据库连接信息
    url: jdbc:mysql://${titan.datasource.host}:${titan.datasource.port}/${titan.datasource.database}?useUnicode=true&characterEncoding=utf-8&autoReconnect=true&useSSL=false&serverTimezone=Asia/Shanghai
    username: ${titan.datasource.username}
    password: ${titan.datasource.password}
    type: com.alibaba.druid.pool.DruidDataSource
    druid: # Druid 连接池
      initial-size: 5 # 初始化连接池大小
      min-idle: 5 # 最小连接池数量
      max-active: 20 # 最大连接池数量
      max-wait: 60000 # 连接时最大等待时间（单位：毫秒）
      test-while-idle: true
      time-between-eviction-runs-millis: 60000 # 配置多久进行一次检测，检测需要关闭的连接（单位：毫秒）
      min-evictable-idle-time-millis: 300000 # 配置一个连接在连接池中最小生存的时间（单位：毫秒）
      max-evictable-idle-time-millis: 900000 # 配置一个连接在连接池中最大生存的时间（单位：毫秒）
      validation-query: SELECT 1 FROM DUAL # 配置测试连接是否可用的查询 sql
      test-on-borrow: false
      test-on-return: false
      pool-prepared-statements: false
      web-stat-filter:
        enabled: true
      stat-view-servlet:
        enabled: true
        url-pattern: ${titan.datasource.druid.url-pattern}
        login-username: ${titan.datasource.druid.login-username}
        login-password: ${titan.datasource.druid.login-password}
      filter:
        stat:
          enabled: true
          log-slow-sql: true # 开启慢 sql 记录
          slow-sql-millis: 2000 # 若执行耗时大于 2s，则视为慢 sql
          merge-sql: true
        wall: # 防火墙
          config:
            multi-statement-allow: true
  data:
    redis:
      host: ${titan.redis.host}
      port: ${titan.redis.port}
      database: ${titan.redis.database}
      password: ${titan.redis.password}
      timeout: 5s # 读超时时间
      connect-timeout: 5s # 链接超时时间
      lettuce:
        pool:
          max-active: 200 # 连接池最大连接数
          max-wait: -1ms # 连接池最大阻塞等待时间（使用负值表示没有限制）
          min-idle: 0 # 连接池中的最小空闲连接
          max-idle: 10 # 连接池中的最大空闲连接
  servlet:
    multipart:
      max-file-size: 2GB # 限制单个上传文件的最大大小为 2GB。如果上传的文件大小超过这个值，将会被拒绝上传。
      max-request-size: 2GB # 限制整个上传请求的最大大小为 2GB。这包括所有上传文件的大小之和。如果请求总大小超过这个值，将会被拒绝
  mail:
    host: ${titan.mail.host}
    port: ${titan.mail.port}
    username: ${titan.mail.username}
    password: ${titan.mail.password}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
    protocol: smtp
  rabbitmq:
    host: ${titan.rabbitmq.host}
    port: ${titan.rabbitmq.port}
    virtual-host: ${titan.rabbitmq.virtual-host}
    username: ${titan.rabbitmq.username}
    password: ${titan.rabbitmq.password}
    connection-timeout: 1s #设置MQ连接的超时时间
    template:
      retry:
        enabled: true #开启超时重试
        initial-interval: 1000ms #连接失败后等几秒在尝试连接
        multiplier: 2 #失败后下次等待的倍数  initial-interval*multiplier
        max-attempts: 3 #最大重试次数
    publisher-confirm-type: correlated # 开启publisher confirm机制，并设置confirm类型 correlated : MQ异步回调方式返回回执信息; simple: 同步阻塞等待MQ返回回执消息; none : 关闭confirm机制;
    publisher-returns: true # 开启publisher return机制
    listener:
      simple:
        retry:
          enabled: true # 开启消费者失败重试
          initial-interval: 1000ms # 初识的失败等待时长为1秒
          multiplier: 2 # 失败的等待时长倍数，下次等待时长 = multiplier * last-interval
          max-attempts: 3 # 最大重试次数
          stateless: true # true无状态；false有状态。如果业务中包含事务，这里改为false
        acknowledge-mode: manual #默认情况下消息消费者是自动确认消息的，如果要手动确认消息则需要修改确认模式为manual
        prefetch: 1 # 消费者每次从队列获取的消息数量。此属性当不设置时为：轮询分发，设置为1为：公平分发


titan:
  md5:
    salt: shumei:)
  #AESKEY
  aes:
    secretKey: eW1awsJiSLH7CGnmPGvBQZyPmACHTQYImNJPAu34fzs
  cloud:
    provider: minio
    maxSize: 1000000     #上传文件大小10MB
    aliyun:
      aoss:
        endpoint: ${titan.cloud.aliyun.aoss.endpoint}
        access-key-id: ${titan.cloud.aliyun.aoss.access-key-id}
        access-key-secret: ${titan.cloud.aliyun.aoss.access-key-secret}
        bucket-name-open: ${titan.cloud.aliyun.aoss.bucket-name-open}
        bucket-name-private: ${titan.cloud.aliyun.aoss.bucket-name-private}
      asms:
        region-id: ${titan.cloud.aliyun.asms.region-id}
        access-key-id: ${titan.cloud.aliyun.asms.access-key-id}
        access-key-secret: ${titan.cloud.aliyun.asms.access-key-secret}
        template-code: ${titan.cloud.aliyun.asms.template-code}
        sign-name: ${titan.cloud.aliyun.asms.sign-name}

    qiniu:
      access-key: "your-access-key"
      secret-key: "your-secret-key"
      bucket-name: "your-bucket-name"
      domain: "your-domain"
    tencent:
      secret-id: "your-secret-id"
      secret-key: "your-secret-key"
      region: "ap-guangzhou"
      bucket-name: "your-bucket-name"
    # minio
    minio:
      endpoint: ${titan.cloud.minio.endpoint}
      access-key-id: ${titan.cloud.minio.access-key-id}
      access-key-secret: ${titan.cloud.minio.access-key-secret}
      bucket-name-open: ${titan.cloud.minio.bucket-name-open}
      bucket-name-private: ${titan.cloud.minio.bucket-name-private}
  auth:
    proxy:
      host: ${titan.auth.proxy.host}
      port: ${titan.auth.proxy.port}
      timeout: 15000
    gitee:
      clientId: ${titan.auth.gitee.clientId}
      clientSecret: ${titan.auth.gitee.clientSecret}
      redirectUri: ${titan.auth.gitee.redirectUri}
    google:
      clientId: ${titan.auth.google.clientId}
      clientSecret: ${titan.auth.google.clientSecret}
      redirectUri: ${titan.auth.google.redirectUri}



# MyBatis配置
mybatis-plus:
  # 搜索指定包别名
  typeAliasesPackage: com.shumei.auth.domain.entity
  # 配置mapper的扫描，找到所有的mapper.xml映射文件
  mapperLocations: classpath*:mapper/*Mapper.xml
  # 加载全局的配置文件注释
  configuration:
    # 自动驼峰命名
    map-underscore-to-camel-case: true

############## Sa-Token 配置 (文档: https://sa-token.cc) ##############
sa-token:
  # token 名称（同时也是 cookie 名称）
  token-name: token
  # token 有效期（单位：秒） 默认30天，-1 代表永久有效  259200 72小时
  timeout:  259200
  # token 最低活跃频率（单位：秒），如果 token 超过此时间没有访问系统就会被冻结，默认-1 代表不限制，永不冻结
  active-timeout: -1
  # 是否允许同一账号多地同时登录 （为 true 时允许一起登录, 为 false 时新登录挤掉旧登录）
  is-concurrent: false
  # 在多人登录同一账号时，是否共用一个 token （为 true 时所有登录共用一个 token, 为 false 时每次登录新建一个 token）
  is-share: true
  # token 风格（默认可取值：uuid、simple-uuid、random-32、random-64、random-128、tik）
  token-style: uuid
  # 是否输出操作日志
  is-log: true
#公众号
oauth2:
  wechat:
    app-id: wx80bab9f650999aa9
    app-secret: 19786f25ded746f29bcc014652cedb6d
    access-token-url: https://api.weixin.qq.com/cgi-bin/token
    gzh-qrcode-create-url: https://api.weixin.qq.com/cgi-bin/qrcode/create
    gzh-qrcode-url: https://mp.weixin.qq.com/cgi-bin/showqrcode

# springdoc-openapi项目配置
springdoc:
  swagger-ui:
    #自定义swagger前端请求路径,输入http:localhost:8080/swagger-ui会自动重定向到swagger页面
    path: /swagger-ui
    tags-sorter: alpha
    operations-sorter: alpha
  api-docs:
    path: /v3/api-docs  #swagger后端请求地址
    enabled: true   #是否开启文档功能
  group-configs: #分组配置,可配置多个分组
#    - group: 'default'             #分组名称
#      paths-to-match: '/**'        #配置需要匹配的路径
#      packages-to-scan: com.titancore    #配置要扫描包的路径,一般配置到启动类所在的包名
#    - group: 'admin-api'
#      paths-to-match: '/**'
#      packages-to-scan: com.titancore

# knife4j的增强配置，不需要增强可以不配
knife4j:
  enable: true    #开启knife4j,无需添加@EnableKnife4j注解
  setting:
    language: zh_cn   #中文
    swagger-model-name: 实体列表   #默认为：Swagger Models
  #开启Swagger的Basic认证功能,默认是false,开启后访问文档页面时会弹出用户名和密码输入框
  basic:
    enable: true
    # Basic认证用户名
    username: user
    # Basic认证密码
    password: 123456
